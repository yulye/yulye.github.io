{"version":3,"sources":["logo.svg","firebaseConfig.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseApp","firebase","firebaseConfig","App","_this$props","this","props","user","signOut","signInWithGoogle","react_default","a","createElement","className","src","logo","alt","displayName","onClick","Component","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCUzBC,SAVA,CACbC,OAAQ,0CACRC,WAAY,yBACZC,YAAa,gCACbC,UAAW,SACXC,cAAe,GACfC,kBAAmB,gBACnBC,MAAO,0DCGHC,SAAcC,gBAAuBC,IAErCC,mLACK,IAAAC,EAKHC,KAAKC,MAHPC,EAFKH,EAELG,KACAC,EAHKJ,EAGLI,QACAC,EAJKL,EAILK,iBAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACpBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OACEE,IAAKC,IACLF,UAAU,WACVG,IAAI,SAEJT,EACEG,EAAAC,EAAAC,cAAA,mBAAWL,EAAKU,aAChBP,EAAAC,EAAAC,cAAA,4BAIFL,EACEG,EAAAC,EAAAC,cAAA,UAAQM,QAASV,GAAjB,YACAE,EAAAC,EAAAC,cAAA,UAAQM,QAAST,GAAjB,gCAxBWU,aAkCZC,EAAkBpB,EAAYqB,OAE9BC,EAAY,CAChBC,eAAgB,IAAItB,OAAcuB,oBAGrBC,cAAiB,CAC9BH,YACAF,mBAFaK,CAGZtB,GC3CiBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.131f2aa7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const config = {\n  apiKey: \"AIzaSyCC5hLus2-XzkS9-UGFKsaGow4Is3K01O0\",\n  authDomain: \"lyeyuu.firebaseapp.com\",\n  databaseURL: \"https://lyeyuu.firebaseio.com\",\n  projectId: \"lyeyuu\",\n  storageBucket: \"\",\n  messagingSenderId: \"1073685159978\",\n  appId: \"1:1073685159978:web:fd4546c3e9f6ab2c\"\n};\n\nexport default config;\n","import React, { Component } from 'react';\n\nimport withFirebaseAuth from 'react-with-firebase-auth'\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from './firebaseConfig';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nclass App extends Component {\n  render() {\n    const {\n      user,\n      signOut,\n      signInWithGoogle,\n    } = this.props;\n\n    return (\n      <div className=\"App\">\n\t<header className=\"App-header\">\n\t  <img\n\t    src={logo}\n\t    className=\"App-logo\"\n\t    alt=\"logo\" />\n\t  {\n\t    user\n\t    ? <p>Hello, {user.displayName}</p>\n\t    : <p>Please sign in.</p>\n\t  }\n\n\t  {\n\t    user\n\t    ? <button onClick={signOut}>Sign out</button>\n\t    : <button onClick={signInWithGoogle}>\n\t      Sign in with Google\n\t    </button>\n\t  }\n\t</header>\n      </div>\n    );\n  }\n}\n\nconst firebaseAppAuth = firebaseApp.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}