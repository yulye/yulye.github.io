{"version":3,"sources":["firebaseConfig.js","Loading.js","SignIn.js","User.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Loading","react_default","a","createElement","className","SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","password","signingIn","wrongPassword","handleEmailChange","bind","assertThisInitialized","handlePasswordChange","handleSignIn","handleSubmit","e","setState","target","value","_this2","firebaseAppAuth","signInWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","alert","console","log","preventDefault","onSubmit","onChange","type","placeholder","autoFocus","required","onClick","src_Loading","React","Component","User","user","name","displayName","updatingName","signingOut","handleSignOut","handleNameChange","handleUpdateName","currentUser","updateProfile","then","signOut","signedOut","firebase","firebaseConfig","auth","App","onAuthStateChanged","src_User","src_SignIn","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAUeA,SAVA,CACbC,OAAQ,0CACRC,WAAY,yBACZC,YAAa,gCACbC,UAAW,SACXC,cAAe,GACfC,kBAAmB,gBACnBC,MAAO,sDCAMC,MAJf,WACE,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,4BCmFMC,cAnFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVC,WAAW,EACXC,eAAe,GAEjBX,EAAKY,kBAAoBZ,EAAKY,kBAAkBC,KAAvBZ,OAAAa,EAAA,EAAAb,CAAAD,IACzBA,EAAKe,qBAAuBf,EAAKe,qBAAqBF,KAA1BZ,OAAAa,EAAA,EAAAb,CAAAD,IAC5BA,EAAKgB,aAAehB,EAAKgB,aAAaH,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IACpBA,EAAKiB,aAAejB,EAAKiB,aAAaJ,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IAXHA,iFAcDkB,GAChBf,KAAKgB,SAAS,CAACX,MAAOU,EAAEE,OAAOC,qDAGZH,GACnBf,KAAKgB,SAAS,CAACV,SAAUS,EAAEE,OAAOC,6CAGvBH,GACX,IAAMV,EAAQL,KAAKI,MAAMC,MACnBC,EAAWN,KAAKI,MAAME,SACxBD,GAASC,GAAUN,KAAKc,aAAaC,wCAG9BA,GAAG,IAAAI,EAAAnB,KACRK,EAAQL,KAAKI,MAAMC,MACnBC,EAAWN,KAAKI,MAAME,SACvBN,KAAKI,MAAMG,WAChBP,KAAKJ,MAAMwB,gBAAgBC,2BACzBhB,EAAOC,GACPgB,MAAM,SAACC,GACP,IAAIC,EAAYD,EAAME,KAClBC,EAAeH,EAAMI,QACP,wBAAdH,GACTI,MAAM,mBACNT,EAAKH,SAAS,CACZR,eAAe,KAGjBoB,MAAMF,GAEDG,QAAQC,IAAIP,GACZJ,EAAKH,SAAS,CACnBT,WAAW,MAGRP,KAAKgB,SAAS,CACZT,WAAW,IAEbQ,EAAEgB,kDAIF,OACExC,EAAAC,EAAAC,cAAA,QAAMuC,SAAUhC,KAAKc,cAC1BvB,EAAAC,EAAAC,cAAA,SACEyB,MAAOlB,KAAKI,MAAMC,MAClB4B,SAAUjC,KAAKS,kBACfyB,KAAK,QACLC,YAAY,QACZC,WAAS,EACTC,UAAQ,IAEV9C,EAAAC,EAAAC,cAAA,SACEyB,MAAOlB,KAAKI,MAAME,SAClB2B,SAAUjC,KAAKY,qBACfsB,KAAK,WACLC,YAAY,WACZE,UAAQ,IAEV9C,EAAAC,EAAAC,cAAA,UAAQ6C,QAAStC,KAAKa,cAAtB,WACAtB,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,gCACCO,KAAKI,MAAMG,WAAahB,EAAAC,EAAAC,cAAC8C,EAAD,cA9ELC,IAAMC,WCyDZC,cAxDb,SAAAA,EAAY9C,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GACjB7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KAAMJ,IACN,IAAM+C,EAAO/C,EAAM+C,KACfC,EAAOD,EAAKE,YAHC,OAIZF,EAAKE,cAAaD,EAAOD,EAAKtC,OACnCR,EAAKO,MAAQ,CACXwC,KAAMA,EACNE,cAAc,EACdC,YAAY,GAEdlD,EAAKmD,cAAgBnD,EAAKmD,cAActC,KAAnBZ,OAAAa,EAAA,EAAAb,CAAAD,IACrBA,EAAKoD,iBAAmBpD,EAAKoD,iBAAiBvC,KAAtBZ,OAAAa,EAAA,EAAAb,CAAAD,IACxBA,EAAKqD,iBAAmBrD,EAAKqD,iBAAiBxC,KAAtBZ,OAAAa,EAAA,EAAAb,CAAAD,IAZPA,gFAeFkB,GACVf,KAAKI,MAAM0C,cACD9C,KAAKJ,MAAMwB,gBAAgB+B,YACnCC,cAAc,CAACP,YAAa7C,KAAKI,MAAMwC,OAAOS,KAAK,cACrD/B,MAAM,SAAAC,GAAUM,QAAQC,IAAIP,KAEjCvB,KAAKgB,SAAS,CAAC8B,cAAc,6CAGd/B,GACff,KAAKgB,SAAS,CAAC4B,KAAM7B,EAAEE,OAAOC,8CAGlBH,GACPf,KAAKI,MAAM2C,YAChB/C,KAAKJ,MAAMwB,gBAAgBkC,UAC3BtD,KAAKgB,SAAS,CACZuC,WAAW,qCAKb,OACEhE,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,iBAEEF,EAAAC,EAAAC,cAAA,SACEyB,MAAOlB,KAAKI,MAAMwC,KAClBX,SAAUjC,KAAKiD,iBACfb,WAAS,IALb,KASA7C,EAAAC,EAAAC,cAAA,UAAQ6C,QAAStC,KAAKkD,kBAAtB,UACA3D,EAAAC,EAAAC,cAAA,UAAQ6C,QAAStC,KAAKgD,eAAtB,YACChD,KAAKI,MAAMmD,WAAahE,EAAAC,EAAAC,cAAC8C,EAAD,cAnDPC,IAAMC,WCOnBrB,EADcoC,gBAAuBC,GACPC,OA+BrBC,cA3Bb,SAAAA,EAAY/D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2D,IACjB9D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6D,GAAAxD,KAAAH,KAAMJ,KACDQ,MAAQ,CACXuC,KAAM,GAHS9C,mFAOC,IAAAsB,EAAAnB,KAClBoB,EAAgBwC,mBAAmB,SAACjB,GAClCxB,EAAKH,SAAS,CAAC2B,KAAMA,uCAKvB,IAAMA,EAAO3C,KAAKI,MAAMuC,KACxB,OAAa,IAATA,EACKpD,EAAAC,EAAAC,cAAC8C,EAAD,MACEI,EACFpD,EAAAC,EAAAC,cAACoE,EAAD,CACZlB,KAAMA,EACNvB,gBAAiBA,IAGP7B,EAAAC,EAAAC,cAACqE,EAAD,CAAQ1C,gBAAiBA,WAzBlBoB,IAAMC,WCAJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.1a4be5de.chunk.js","sourcesContent":["const config = {\n  apiKey: \"AIzaSyCC5hLus2-XzkS9-UGFKsaGow4Is3K01O0\",\n  authDomain: \"lyeyuu.firebaseapp.com\",\n  databaseURL: \"https://lyeyuu.firebaseio.com\",\n  projectId: \"lyeyuu\",\n  storageBucket: \"\",\n  messagingSenderId: \"1073685159978\",\n  appId: \"1:1073685159978:web:fd4546c3e9f6ab2c\"\n};\n\nexport default config;\n","import React from 'react';\nimport './Loading.css';\n\nfunction Loading() {\n  return <div className=\"Loading\">loading... please wait.</div>;\n}\n\nexport default Loading;\n\n","import React from 'react';\nimport Loading from './Loading';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      signingIn: false,\n      wrongPassword: false,\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleSignIn = this.handleSignIn.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleEmailChange(e) {\n    this.setState({email: e.target.value});\n  }\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value});\n  }\n\n  handleSignIn(e) {\n    const email = this.state.email;\n    const password = this.state.password;\n    if (email && password) this.handleSubmit(e);\n  }\n\n  handleSubmit(e) {\n    const email = this.state.email;\n    const password = this.state.password;\n    if (!this.state.signingIn)\n    this.props.firebaseAppAuth.signInWithEmailAndPassword(\n      email, password\n    ).catch((error) => {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      if (errorCode === 'auth/wrong-password') {\n\talert('Wrong password.');\n\tthis.setState({\n\t  wrongPassword: true,\n\t});\n      } else {\n\talert(errorMessage);\n      }\n      console.log(error);\n      this.setState({\n\tsigningIn: false,\n      });\n    });\n    this.setState({\n      signingIn: true,\n    });\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n\t<input\n\t  value={this.state.email}\n\t  onChange={this.handleEmailChange}\n\t  type=\"email\"\n\t  placeholder=\"email\"\n\t  autoFocus\n\t  required\n\t/>\n\t<input\n\t  value={this.state.password}\n\t  onChange={this.handlePasswordChange}\n\t  type=\"password\"\n\t  placeholder=\"password\"\n\t  required\n\t/>\n\t<button onClick={this.handleSignIn}>Sign In</button>\n\t<button>Sign Up</button>\n\t<button>Reset Password</button>\n\t{this.state.signingIn && <Loading/>}\n      </form>\n    );\n  }\n}\n\nexport default SignIn;\n\n","import React from 'react';\nimport Loading from './Loading';\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    const user = props.user;\n    let name = user.displayName;\n    if (!user.displayName) name = user.email;\n    this.state = {\n      name: name,\n      updatingName: false,\n      signingOut: false,\n    };\n    this.handleSignOut = this.handleSignOut.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleUpdateName = this.handleUpdateName.bind(this);\n  }\n\n  handleUpdateName(e) {\n    if (!this.state.updatingName) {\n      const user = this.props.firebaseAppAuth.currentUser;\n      user.updateProfile({displayName: this.state.name}).then(() => {\n      }).catch(error => {console.log(error)});\n    }\n    this.setState({updatingName: true});\n  }\n\n  handleNameChange(e) {\n    this.setState({name: e.target.value});\n  }\n\n  handleSignOut(e) {\n    if (!this.state.signingOut)\n    this.props.firebaseAppAuth.signOut();\n    this.setState({\n      signedOut: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n\t<div>\n\t  Hi, \n\t  <input\n\t    value={this.state.name}\n\t    onChange={this.handleNameChange}\n\t    autoFocus\n\t  />\n\t  !\n\t</div>\n\t<button onClick={this.handleUpdateName}>Change</button>\n\t<button onClick={this.handleSignOut}>Sign Out</button>\n\t{this.state.signedOut && <Loading/>}\n      </div>\n    );\n  }\n}\n\nexport default User;\n\n","import React from 'react';\nimport './App.css';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from './firebaseConfig';\nimport SignIn from './SignIn';\nimport Loading from './Loading';\nimport User from './User';\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firebaseAppAuth = firebaseApp.auth();\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: 0,\n    };\n  }\n\n  componentDidMount() {\n    firebaseAppAuth.onAuthStateChanged((user) => {\n      this.setState({user: user});\n    });\n  }\n\n  render() {\n    const user = this.state.user;\n    if (user === 0) {\n      return <Loading/>;\n    } else if (user) {\n      return <User\n\tuser={user}\n\tfirebaseAppAuth={firebaseAppAuth}\n      />;\n    }\n    return <SignIn firebaseAppAuth={firebaseAppAuth}/>;\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}