{"version":3,"sources":["firebaseConfig.js","App1.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseAppAuth","firebase","firebaseConfig","auth","Loading","react_default","a","createElement","className","User","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","signedOut","handleSignOut","bind","assertThisInitialized","e","signOut","setState","user","displayName","onClick","React","Component","SignIn","_this2","email","password","signingIn","wrongPassword","handleEmailChange","handlePasswordChange","handleSignIn","handleSubmit","target","value","_this3","signInWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","alert","console","log","preventDefault","onSubmit","onChange","name","type","placeholder","autoFocus","required","App","_this4","_this5","onAuthStateChanged","App1_User","App1_SignIn","Boolean","window","location","hostname","match","ReactDOM","render","App1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc15575d.chunk.js","sourcesContent":["const config = {\n  apiKey: \"AIzaSyCC5hLus2-XzkS9-UGFKsaGow4Is3K01O0\",\n  authDomain: \"lyeyuu.firebaseapp.com\",\n  databaseURL: \"https://lyeyuu.firebaseio.com\",\n  projectId: \"lyeyuu\",\n  storageBucket: \"\",\n  messagingSenderId: \"1073685159978\",\n  appId: \"1:1073685159978:web:fd4546c3e9f6ab2c\"\n};\n\nexport default config;\n","import React from 'react';\nimport './App.css';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from './firebaseConfig';\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firebaseAppAuth = firebaseApp.auth();\n\nfunction Loading() {\n  return <div className=\"loading\">loading... please wait.</div>;\n}\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signedOut: false,\n    };\n    this.handleSignOut = this.handleSignOut.bind(this);\n  }\n\n  handleSignOut(e) {\n    firebaseAppAuth.signOut();\n    this.setState({\n      signedOut: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n\t<div>Hi, {this.props.user.displayName}!</div>\n\t<button onClick={this.handleSignOut}>Sign Out</button>\n\t{this.state.signedOut && <Loading/>}\n      </div>\n    );\n  }\n}\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      signingIn: false,\n      wrongPassword: false,\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleSignIn = this.handleSignIn.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleEmailChange(e) {\n    this.setState({email: e.target.value});\n  }\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value});\n  }\n\n  handleSignIn(e) {\n    const email = this.state.email;\n    const password = this.state.password;\n    if (email && password) this.handleSubmit(e);\n  }\n\n  handleSubmit(e) {\n    const email = this.state.email;\n    const password = this.state.password;\n    if (!this.state.signingIn)\n    firebaseAppAuth.signInWithEmailAndPassword(\n      email, password\n    ).catch((error) => {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      if (errorCode === 'auth/wrong-password') {\n\talert('Wrong password.');\n\tthis.setState({\n\t  wrongPassword: true,\n\t});\n      } else {\n\talert(errorMessage);\n      }\n      console.log(error);\n      this.setState({\n\tsigningIn: false,\n      });\n    });\n    this.setState({\n      signingIn: true,\n    });\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n\t<input\n\t  value={this.state.email}\n\t  onChange={this.handleEmailChange}\n\t  name=\"email\"\n\t  type=\"email\"\n\t  placeholder=\"email\"\n\t  autoFocus\n\t  required\n\t/>\n\t<input\n\t  value={this.state.password}\n\t  onChange={this.handlePasswordChange}\n\t  name=\"password\"\n\t  type=\"password\"\n\t  placeholder=\"password\"\n\t  required\n\t/>\n\t<button onClick={this.handleSignIn}>Sign In</button>\n\t<button>Sign Up</button>\n\t<button>Reset Password</button>\n\t{this.state.signingIn && <Loading/>}\n      </form>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: 0,\n    };\n  }\n\n  componentDidMount() {\n    firebaseAppAuth.onAuthStateChanged((user) => {\n      this.setState({user: user});\n      console.log(user);\n    });\n  }\n\n  render() {\n    const user = this.state.user;\n    let view;\n    if (user === 0) {\n      view = <Loading/>;\n    } else if (user) {\n      view = <User user={user}/>;\n    } else {\n      view = <SignIn/>;\n    }\n    return view;\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App1';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}